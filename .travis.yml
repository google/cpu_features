language: c

cache:
  timeout: 1000
  directories:
    - $HOME/cpu_features_archives

# see: https://docs.travis-ci.com/user/reference/focal/
dist: focal
addons:
  apt_packages:
    - ninja-build

jobs:
  include:
  - os: linux
    compiler: gcc
    script:
    - cmake --version
    - cmake -S. -Bbuild
    - cmake --build build --target all -v
    - cmake --build build --target test -v
    - cmake --build build --target install -v -- DESTDIR=dist
  - os: linux
    compiler: clang
    script:
    - cmake --version
    - cmake -S. -Bbuild
    - cmake --build build --target all -v
    - cmake --build build --target test -v
    - cmake --build build --target install -v -- DESTDIR=dist

  - os: osx
    compiler: gcc
    script:
    - cmake --version
    - cmake -S. -Bbuild -G "Xcode" -DCMAKE_CONFIGURATION_TYPES=Release
    - cmake --build build --config Release --target ALL_BUILD -v
    - cmake --build build --config Release --target RUN_TESTS -v
    - cmake --build build --config Release --target install -v
  - os: osx
    compiler: clang
    script:
    - cmake --version
    - cmake -S. -Bbuild  -G "Xcode" -DCMAKE_CONFIGURATION_TYPES=Release
    - cmake --build build --target ALL_BUILD -v
    - cmake --build build --target RUN_TESTS -v
    - cmake --build build --config Release --target install -v

  - os: windows
    script:
    - cmake --version
    - cmake -S. -Bbuild -G "Visual Studio 15 2017 Win64" -DCMAKE_CONFIGURATION_TYPES=Release
    - cmake --build build --config Release --target ALL_BUILD
    - cmake --build build --config Release --target RUN_TESTS
    - cmake --build build --config Release --target INSTALL

  # see: https://docs.travis-ci.com/user/multi-cpu-architectures/
  - os: linux
    arch: ppc64le
    compiler: gcc
    script:
    - cmake --version
    - cmake -S. -Bbuild
    - cmake --build build --target all -v
    - cmake --build build --target test -v
    - cmake --build build --target install -v -- DESTDIR=dist
  - os: linux
    arch: ppc64le
    compiler: clang
    script:
    - cmake --version
    - cmake -S. -Bbuild
    - cmake --build build --target all -v
    - cmake --build build --target test -v
    - cmake --build build --target install -v -- DESTDIR=dist

  # Toolchains for little-endian, 64-bit ARMv8 for GNU/Linux systems
  - os: linux
    env:
      TARGET=aarch64-linux-gnu
    script:
    - ./scripts/run_integration.sh
  # Toolchains for little-endian, hard-float, 32-bit ARMv7 (and earlier) for GNU/Linux systems
  - os: linux
    env:
      TARGET=arm-linux-gnueabihf
    script:
    - ./scripts/run_integration.sh
  # Toolchains for little-endian, 32-bit ARMv8 for GNU/Linux systems
  - os: linux
    env:
      TARGET=armv8l-linux-gnueabihf
    script:
    - ./scripts/run_integration.sh
  # Toolchains for little-endian, soft-float, 32-bit ARMv7 (and earlier) for GNU/Linux systems
  - os: linux
    env:
      TARGET=arm-linux-gnueabi
    script:
    - ./scripts/run_integration.sh
  # Toolchains for big-endian, 64-bit ARMv8 for GNU/Linux systems
  - os: linux
    env:
      TARGET=aarch64_be-linux-gnu
    script:
    - ./scripts/run_integration.sh
  # Toolchains for big-endian, hard-float, 32-bit ARMv7 (and earlier) for GNU/Linux systems
  - os: linux
    env:
      TARGET=armeb-linux-gnueabihf
    script:
    - ./scripts/run_integration.sh
  # Toolchains for big-endian, soft-float, 32-bit ARMv7 (and earlier) for GNU/Linux systems
  - os: linux
    env:
      TARGET=armeb-linux-gnueabi
    script:
    - ./scripts/run_integration.sh
  - os: linux
    env:
      TARGET=mips32
    script:
    - ./scripts/run_integration.sh
  - os: linux
    env:
      TARGET=mips32el
    script:
    - ./scripts/run_integration.sh
  - os: linux
    env:
      TARGET=mips64
    script:
    - ./scripts/run_integration.sh
  - os: linux
    env:
      TARGET=mips64el
    script:
    - ./scripts/run_integration.sh
